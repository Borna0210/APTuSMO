import os
import subprocess
import re
import requests
from bs4 import BeautifulSoup
import time

def ensure_protocol(url):
    if not re.match(r'http[s]?://', url):
        test_url = f'http://{url}'
        try:
            response = requests.get(test_url, timeout=5)
            if response.status_code == 200:
                return test_url
        except requests.RequestException:
            pass
        
        test_url = f'https://{url}'
        try:
            response = requests.get(test_url, timeout=5)
            if response.status_code == 200:
                return test_url
        except requests.RequestException:
            pass
        
        raise ValueError(f"Cannot reach the target URL with either HTTP or HTTPS: {url}")
    return url

def wafninja_bypass(target):
    try:
        print("Starting Wafninja bypass")
        target = ensure_protocol(target)
        
        if not os.path.exists('attack_reports/wafninja'):
            os.makedirs('attack_reports/wafninja')
        
        fuzz_file = 'scan_reports/dirsearch.txt'
        if not os.path.exists(fuzz_file):
            raise FileNotFoundError(f"Fuzz input file {fuzz_file} not found")
        
        with open(fuzz_file, 'r') as file:
            fuzz_inputs = [line.strip() for line in file if line.strip().endswith(('.php'))] #, '.asp', '.aspx', '.jsp', '.html', '.htm', '.cgi', '.pl', '.py'
        
        combinations = []
        for fuzz_input in fuzz_inputs:
            full_url = f'{fuzz_input}?id=FUZZ'  # Change the URL format for SQL testing
            combinations.extend([
                {'command': 'fuzz', 'url': full_url, 'params': {'cookie': 'phpsessid=value', 'test': 'xss'}},
                {'command': 'fuzz', 'url': full_url, 'params': {'cookie': 'phpsessid=value', 'test': 'sql'}}
            ])
        
        for i, combo in enumerate(combinations):
            cmd = ['python3', 'Exploiting/WAFNinja/wafninja.py', combo['command']]
            
            cmd.extend(['-u', combo['url']])
            cmd.extend(['-c', combo['params']['cookie'], '-t', combo['params']['test']])
                
            # Format file name
            clean_url_path = re.sub(r'[^\w]', '_', combo['url'])
            output_file = f'attack_reports/wafninja/wafninja_result_{clean_url_path}_{i + 1}.html'
            cmd.extend(['-o', output_file])

            # Execute the command
            process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if process.returncode != 0:
                print(f"Error running WAFNinja with command: {' '.join(cmd)}\nError: {process.stderr}")
                with open('attack_reports/wafninja_errors.txt', 'a') as error_file:
                    error_file.write(f"Error running WAFNinja with command: {' '.join(cmd)}\nError: {process.stderr}\n")

        # Wait for a few seconds to ensure all files are written
        time.sleep(5)

        # Check all output files and remove those that do not contain a cell with class "Yes"
        for file_name in os.listdir('attack_reports/wafninja'):
            if file_name.startswith('wafninja_result') and file_name.endswith('.html'):
                file_path = os.path.join('attack_reports/wafninja', file_name)
                with open(file_path, 'r') as file:
                    soup = BeautifulSoup(file, 'html.parser')
                    if not soup.select('td.Yes'):
                        os.remove(file_path)
                    else:
                        print(f"{file_path} contains a cell with class 'Yes', possible attack")
        print("Finished Wafninja bypass")

    except Exception as e:
        with open('attack_reports/wafninja_errors.txt', 'a') as error_file:
            error_file.write(f"An unexpected error occurred: {str(e)}\n")

