import subprocess
import os
import re

# Function to strip ANSI codes from the text
def strip_ansi_codes(text):
    ansi_escape = re.compile(r'\x1B[@-_][0-?]*[ -/]*[@-~]')
    return ansi_escape.sub('', text)

# Function to run XSStrike on a given URL
def xss_strike(url, append=False, report_file='attack_reports/xsstrike.txt'):
    command = ['python3', 'Exploiting/XSStrike/xsstrike.py', '--url', url]
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    
    if process.returncode != 0:
        print(f"Error: {stderr.decode('utf-8')}")
    else:
        mode = 'a' if append else 'w'
        with open(report_file, mode) as file:
            file.write(url + "\n")
            file.write(strip_ansi_codes(stdout.decode('utf-8')))
            file.write("\n")
        print(f"Results written to {report_file}")

# Function to read URLs from a file and run XSStrike on each
def run_xss_strike():
    print("Starting XSSStrike")
    report_file = 'attack_reports/xsstrike.txt'
    
    with open('scan_reports/dirsearch.txt', 'r') as file:
        urls = file.readlines()

    # Filter URLs that contain '?' and '='
    filtered_urls = [url.strip() for url in urls if '?' in url and '=' in url]
    
    for i, url in enumerate(filtered_urls):
        append = i > 0
        xss_strike(url, append, report_file)
    print("Finished XSSStrike")

