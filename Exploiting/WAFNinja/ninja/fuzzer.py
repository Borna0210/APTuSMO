import ssl
import urllib.parse
import urllib.request
import copy
import random
import string
from time import sleep
from prettytable import PrettyTable
import html
import codecs
import sqlite3
import os
import sys

current_directory = os.path.dirname(os.path.abspath(__file__))

# Construct the path to the database file
db_path = os.path.join(current_directory, '../db/db.sqlite')

def getFuzz(type):
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    list = [type]
    sql = '''SELECT fuzz, expected from fuzz where type=?'''
    c.execute(sql, list)
    output = []
    for value in c.fetchall():
        output.append([value[0], value[1]])
    conn.close()
    print("Retrieved fuzz strings from database:", output)
    return output

def fireFuzz(type, fuz, url, params, header, delay, outputFile, proxy, prefix, postfix):
    fuzz = getFuzz(type)
    print("Fuzz strings to be processed:", fuzz)
    print("URL:", url)
    print("Params:", params)
    print("Header:", header)
    print("Delay:", delay)
    print("Output File:", outputFile)
    print("Proxy:", proxy)
    print("Prefix:", prefix)
    print("Postfix:", postfix)

    if not fuzz:
        print("No fuzz strings to process.")
        return

    if proxy:
        httpProxy = urllib.request.ProxyHandler({'http': proxy, 'https': proxy})
        ctx = ssl.create_default_context()
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
        opener = urllib.request.build_opener(urllib.request.HTTPSHandler(context=ctx), httpProxy)
        urllib.request.install_opener(opener)
    else:
        opener = urllib.request.build_opener()
    opener.addheaders = [('User-Agent', 'Mozilla/5.0')]
    for h in header:
        opener.addheaders.append(h)
    result = []

    for fuzz_string in fuzz:
        expected = fuzz_string[1]
        fuzz_enc = (prefix + fuzz_string[0] + postfix).encode('utf-8')
        print(f"Processing fuzz: {fuzz_enc} with expected output: {expected}")
        try:
            sleep(float(delay))
            if params is None:  # GET parameter
                randomString, url_with_fuzz = insertFuzz(url, fuzz_enc)
                response = opener.open(url_with_fuzz)
            else:  # POST parameter
                randomString, params_with_fuzz = setParams(params, fuzz_enc)
                response = opener.open(url, data=urllib.parse.urlencode(params_with_fuzz).encode('utf-8'))
            content = response.read()
            occurence = content.find(randomString.encode('utf-8')) + len(randomString)  # get position of the randomString + length(randomString) to get to the fuzz
            result.append({
                'fuzz': fuzz_enc,
                'expected': expected,
                'httpCode': response.getcode(),
                'contentLength': len(content),
                'output': content[occurence:occurence + len(expected)]
            })  # take string from occurence to occurence+len(expected)
        except urllib.error.HTTPError as error:  # HTTP Status != 200
            if error.code == 404:
                print('ERROR: Target URL not reachable!')
                sys.exit()
            else:  # HTTP Status != 404
                result.append({
                    'fuzz': fuzz_enc,
                    'expected': expected,
                    'httpCode': error.code,
                    'contentLength': '-',
                    'output': '-'
                })

    showOutput(type, url, result, outputFile, delay, proxy, prefix, postfix)

def showOutput(type, url, result, outputFile, delay, proxy, prefix, postfix):
    table = PrettyTable(['Fuzz', 'HTTP Status', 'Content-Length', 'Expected', 'Output', 'Working'])
    for value in result:
        if value['httpCode'] != 200:
            table.add_row([value['fuzz'].decode('utf-8'), value['httpCode'], value['contentLength'], value['expected'], value['output'].strip(), 'No'])
        else:
            output_str = value['output'].decode('utf-8', errors='ignore')  # Decode bytes to string
            expected_str = value['expected']
            if expected_str in output_str:
                table.add_row([value['fuzz'].decode('utf-8'), value['httpCode'], value['contentLength'], expected_str, output_str, 'Yes'])
            else:
                table.add_row([value['fuzz'].decode('utf-8'), value['httpCode'], value['contentLength'], expected_str, output_str, 'Probably'])

    if outputFile is not None:
        safeurl = html.escape(url)
        table = table.get_html_string(attributes={"class": "OutputTable"})
        table = '<h1>WAFNinja - Penetration testers favorite for WAF Bypassing</h1>' + '<b>URL</b>: ' + safeurl + '<br>' + '<b>TYPE: </b>' + type + '<br>' + '<b>DELAY: </b>' + str(delay) + '<br>' + '<b>PROXY: </b>' + proxy + '<br>' + '<b>PREFIX: </b>' + prefix + '<br>' + '<b>POSTFIX: </b>' + postfix + '<br><br>' + table
        table = '''<meta charset="utf-8"/><style>
        .OutputTable {
        margin:0px;padding:0px;
        width:100%;
        border:1px solid #000000;

        -moz-border-radius-bottomleft:10px;
        -webkit-border-bottom-left-radius:10px;
        border-bottom-left-radius:10px;

        -moz-border-radius-bottomright:10px;
        -webkit-border-bottom-right-radius:10px;
        border-bottom-right-radius:10px;

        -moz-border-radius-topright:10px;
        -webkit-border-top-right-radius:10px;
        border-top-right-radius:10px;

        -moz-border-radius-topleft:10px;
        -webkit-border-top-left-radius:10px;
        border-top-left-radius:10px;
        table-layout: fixed;
        }.OutputTable table{
            border-collapse: collapse;
                border-spacing: 0;
                width:310px;
                height:100%;
                margin:0px;padding:0px;
        }.OutputTable tr:last-child td:last-child {
                -moz-border-radius-bottomright:10px;
                -webkit-border-bottom-right-radius:10px;
                border-bottom-right-radius:10px;
        }
        .OutputTable table tr:first-child td:first-child {
                -moz-border-radius-topleft:10px;
                -webkit-border-top-left-radius:10px;
                border-top-left-radius:10px;
        }
        .OutputTable table tr:first-child td:last-child {
                -moz-border-radius-topright:10px;
                -webkit-border-top-right-radius:10px;
                border-top-right-radius:10px;
        }.OutputTable tr:last-child td:first-child{
                -moz-border-radius-bottomleft:10px;
                -webkit-border-bottom-left-radius:10px;
                border-bottom-left-radius:10px;
        }.OutputTable tr:hover td{
                background-color:#ffffff;
        }
        .OutputTable td{
                vertical-align:middle;
                background-color:#ffffff;
                width:500px;
                word-wrap: break-word;
            height: 15px;
                border:1px solid #000000;
                border-width:0px 1px 1px 0px;
                text-align:center;
                padding:9px;
                font-size:15px;
                font-family:Helvetica;
                font-weight:normal;
                color:#000000;
        }.OutputTable tr:last-child td{
                border-width:0px 1px 0px 0px;
        }.OutputTable tr td:last-child{
                border-width:0px 0px 1px 0px;
        }.OutputTable tr:last-child td:last-child{
                border-width:0px 0px 0px 0px;
        }
        .OutputTable tr:first-child th{
                        background:-o-linear-gradient(bottom, #007fff 5%, #007fff 100%);    background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #007fff), color-stop(1, #007fff) );
                background:-moz-linear-gradient( center top, #007fff 5%, #007fff 100% );
                filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#007fff", endColorstr="#007fff");    background: -o-linear-gradient(top,#007fff,007fff);

                background-color:#007fff;
                border:0px solid #000000;
                text-align:center;
                border-width:0px 0px 1px 1px;
                font-size:15px;
                font-family:Courier;
                font-weight:bold;
                color:#ffffff;
        }
        .OutputTable tr:first-child:hover td{
                background:-o-linear-gradient(bottom, #007fff 5%, #007fff 100%);    background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #007fff), color-stop(1, #007fff) );
                background:-moz-linear-gradient( center top, #007fff 5%, #007fff 100% );
                filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#007fff", endColorstr="#007fff");    background: -o-linear-gradient(top,#007fff,007fff);

                background-color:#007fff;
        }
        .OutputTable tr:first-child td:first-child{
                border-width:0px 0px 1px 0px;
        }
        .OutputTable tr:first-child td:last-child{
                border-width:0px 0px 1px 1px;
        }
        .OutputTable td.Yes{
                background-color:#00FF00;
        }
        .OutputTable td.No{
                background-color:#FF0000;
        }
        .OutputTable td.Probably{
                background-color:#00CCFF;
        }
            </style>''' + table
        table = table.replace('<td>Yes</td>', '<td class="Yes">Yes</td>')
        table = table.replace('<td>No</td>', '<td class="No">No</td>')
        table = table.replace('<td>Probably</td>', '<td class="Probably">Probably</td>')
        file = codecs.open(outputFile, 'w', encoding='utf-8')
        file.write(table)
        file.close()
        print('Output saved to ' + outputFile + '!')
    else:
        print(table)

def insertFuzz(url, fuzz):
    fuzz = urllib.parse.quote_plus(fuzz)  # URL encoding
    randomString = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(6))
    return randomString, url.replace('FUZZ', randomString + str(fuzz))

def setParams(params, fuzz):
    randomString = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(6))
    parameter = copy.deepcopy(params)  # makes a deep copy. this is needed because using a reference does not work
    for param in parameter:
        if parameter[param] == 'FUZZ':
            parameter[param] = randomString + str(fuzz)
    return randomString, parameter

