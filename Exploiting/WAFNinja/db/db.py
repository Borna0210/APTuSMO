import sqlite3

def ensure_table_exists():
    """
    Ensure the required tables are created.
    """
    conn = sqlite3.connect("db.sqlite")
    c = conn.cursor()
    # SQL statement to create a 'payload' table if it doesn't exist
    c.execute('''
    CREATE TABLE IF NOT EXISTS payload (
        id INTEGER PRIMARY KEY,
        payload TEXT NOT NULL,
        type TEXT NOT NULL,
        waf TEXT
    )
    ''')
    # SQL statement to create a 'fuzz' table if it doesn't exist
    c.execute('''
    CREATE TABLE IF NOT EXISTS fuzz (
        id INTEGER PRIMARY KEY,
        fuzz TEXT NOT NULL,
        expected TEXT,
        type TEXT NOT NULL
    )
    ''')
    conn.commit()
    conn.close()

def getPayload(type, waf=None):
    conn = sqlite3.connect("db.sqlite")
    c = conn.cursor()
    params = (type,)
    sql = 'SELECT payload FROM payload WHERE type=?'
    if waf:
        sql += ' AND waf=?'
        params += (waf,)
    c.execute(sql, params)
    output = [value[0] for value in c.fetchall()]
    conn.close()
    return output

def setPayload(input, type, waf='generic'):
    conn = sqlite3.connect("db.sqlite")
    c = conn.cursor()
    c.execute('INSERT INTO payload (payload, type, waf) VALUES (?, ?, ?)', (input, type, waf))
    conn.commit()
    conn.close()
    print('Payload inserted successfully!')

def getFuzz(type):
    conn = sqlite3.connect("db.sqlite")
    c = conn.cursor()
    c.execute('SELECT fuzz, expected FROM fuzz WHERE type=?', (type,))
    output = [(value[0], value[1]) for value in c.fetchall()]
    conn.close()
    return output

def setFuzz(input, expected, type):
    conn = sqlite3.connect("db.sqlite")
    c = conn.cursor()
    c.execute('INSERT INTO fuzz (fuzz, expected, type) VALUES (?, ?, ?)', (input, expected, type))
    conn.commit()
    conn.close()
    print('Fuzz inserted successfully!')

# Ensure the database tables exist before running other operations
ensure_table_exists()
